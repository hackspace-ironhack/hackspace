{"ast":null,"code":"var _jsxFileName = \"/Users/Thi/Desktop/FinalProject/social-network-app/hackspace/client/src/components/FaceRecognition.js\";\nimport React from 'react';\nimport * as faceapi from 'face-api.js';\n\nconst FaceRecognition = () => {\n  const imageUpload = document.getElementById('imageUpload');\n  Promise.all([faceapi.nets.faceRecognitionNet.loadFromUri('/models'), faceapi.nets.faceLandmark68Net.loadFromUri('/models'), faceapi.nets.ssdMobilenetv1.loadFromUri('/models')]).then(start);\n\n  async function start() {\n    const container = document.createElement('div');\n    container.style.position = 'relative';\n    document.body.append(container);\n    const labeledFaceDescriptors = await loadLabeledImages();\n    const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.6);\n    let image;\n    let canvas;\n    document.body.append('Loaded');\n    imageUpload.addEventListener('change', async () => {\n      if (image) image.remove();\n      if (canvas) canvas.remove();\n      image = await faceapi.bufferToImage(imageUpload.files[0]);\n      container.append(image);\n      canvas = faceapi.createCanvasFromMedia(image);\n      container.append(canvas);\n      const displaySize = {\n        width: image.width,\n        height: image.height\n      };\n      faceapi.matchDimensions(canvas, displaySize);\n      const detections = await faceapi.detectAllFaces(image).withFaceLandmarks().withFaceDescriptors();\n      const resizedDetections = faceapi.resizeResults(detections, displaySize);\n      const results = resizedDetections.map(detect => faceMatcher.findBestMatch(detect.descriptor));\n      results.forEach((result, i) => {\n        const box = resizedDetections[i].detection.box;\n        const drawBox = new faceapi.draw.DrawBox(box, {\n          label: result.toString()\n        });\n        drawBox.draw(canvas);\n      });\n    });\n  }\n\n  function loadLabeledImages() {\n    const labels = ['Black Widow', 'Captain America', 'Captain Marvel', 'Hawkeye', 'Jim Rhodes', 'Thor', 'Tony Stark', 'Ali'];\n    return Promise.all(labels.map(async label => {\n      const descriptions = [];\n\n      for (let i = 1; i <= 2; i++) {\n        const img = await faceapi.fetchImage(\"https://raw.githubusercontent.com/WebDevSimplified/Face-Recognition-JavaScript/master/labeled_images/\".concat(label, \"/\").concat(i, \".jpg\"));\n        const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();\n        descriptions.push(detections.descriptor);\n      }\n\n      return new faceapi.LabeledFaceDescriptors(label, descriptions);\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    id: \"imageUpload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nexport default FaceRecognition;","map":{"version":3,"sources":["/Users/Thi/Desktop/FinalProject/social-network-app/hackspace/client/src/components/FaceRecognition.js"],"names":["React","faceapi","FaceRecognition","imageUpload","document","getElementById","Promise","all","nets","faceRecognitionNet","loadFromUri","faceLandmark68Net","ssdMobilenetv1","then","start","container","createElement","style","position","body","append","labeledFaceDescriptors","loadLabeledImages","faceMatcher","FaceMatcher","image","canvas","addEventListener","remove","bufferToImage","files","createCanvasFromMedia","displaySize","width","height","matchDimensions","detections","detectAllFaces","withFaceLandmarks","withFaceDescriptors","resizedDetections","resizeResults","results","map","detect","findBestMatch","descriptor","forEach","result","i","box","detection","drawBox","draw","DrawBox","label","toString","labels","descriptions","img","fetchImage","detectSingleFace","withFaceDescriptor","push","LabeledFaceDescriptors"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as faceapi from 'face-api.js';\n\nconst FaceRecognition = () => {\n  const imageUpload = document.getElementById('imageUpload')\n\n  Promise.all([\n    faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\n    faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\n    faceapi.nets.ssdMobilenetv1.loadFromUri('/models')\n  ]).then(start)\n\n  async function start() {\n    const container = document.createElement('div')\n    container.style.position = 'relative'\n    document.body.append(container)\n    const labeledFaceDescriptors = await loadLabeledImages()\n    const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.6)\n    let image\n    let canvas\n    document.body.append('Loaded')\n    imageUpload.addEventListener('change', async () => {\n      if (image) image.remove()\n      if (canvas) canvas.remove()\n      image = await faceapi.bufferToImage(imageUpload.files[0])\n      container.append(image)\n      canvas = faceapi.createCanvasFromMedia(image)\n      container.append(canvas)\n      const displaySize = { width: image.width, height: image.height }\n      faceapi.matchDimensions(canvas, displaySize)\n      const detections = await faceapi.detectAllFaces(image).withFaceLandmarks().withFaceDescriptors()\n      const resizedDetections = faceapi.resizeResults(detections, displaySize)\n      const results = resizedDetections.map(detect => faceMatcher.findBestMatch(detect.descriptor))\n      results.forEach((result, i) => {\n        const box = resizedDetections[i].detection.box\n        const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() })\n        drawBox.draw(canvas)\n      })\n    })\n  }\n\n  function loadLabeledImages() {\n    const labels = ['Black Widow', 'Captain America', 'Captain Marvel', 'Hawkeye', 'Jim Rhodes', 'Thor', 'Tony Stark', 'Ali']\n    return Promise.all(\n      labels.map(async label => {\n        const descriptions = []\n        for (let i = 1; i <= 2; i++) {\n          const img = await faceapi.fetchImage(`https://raw.githubusercontent.com/WebDevSimplified/Face-Recognition-JavaScript/master/labeled_images/${label}/${i}.jpg`)\n          const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor()\n          descriptions.push(detections.descriptor)\n        }\n\n        return new faceapi.LabeledFaceDescriptors(label, descriptions)\n      })\n    )\n  }\n  return (\n    <div>\n      <input type=\"file\" id=\"imageUpload\"></input>\n    </div>\n  )\n}\n\nexport default FaceRecognition\n"]},"metadata":{},"sourceType":"module"}